-- PeanoNatLib/PeanoNatLib.lean

import Init.Classical


namespace Peano

  def ExistsUnique {Œ± : Type} (p : Œ± ‚Üí Prop) : Prop :=
    ‚àÉ x, (p x ‚àß (‚àÄ y, (p y ‚Üí y = x)))

  syntax "‚àÉ¬π " ident ", " term : term
  syntax "‚àÉ¬π " "(" ident ")" ", " term : term
  syntax "‚àÉ¬π " "(" ident " : " term ")" ", " term : term
  syntax "‚àÉ¬π " ident " : " term ", " term : term

  macro_rules
    | `(‚àÉ¬π $x:ident, $p:term) => `(ExistsUnique (fun $x => $p))
    | `(‚àÉ¬π ($x:ident), $p:term) => `(ExistsUnique (fun $x => $p))
    | `(‚àÉ¬π ($x:ident : $t:term), $p:term) => `(ExistsUnique (fun ($x : $t) => $p))
    | `(‚àÉ¬π $x:ident : $t:term, $p:term) => `(ExistsUnique (fun ($x : $t) => $p))


  noncomputable def choose {Œ± : Type} {p : Œ± ‚Üí Prop} (h : ‚àÉ x, p x) : Œ± :=
    (Classical.indefiniteDescription p h).val

  theorem choose_spec {Œ± : Type} {p : Œ± ‚Üí Prop} (h : ‚àÉ x, p x) : p (choose h) :=
    (Classical.indefiniteDescription p h).property

  def ExistsUnique.exists {Œ± : Type} {p : Œ± ‚Üí Prop} (h : ExistsUnique p) : (‚àÉ x, p x) := by
    cases h with
    | intro x hx =>
      exact ‚ü®x, hx.left‚ü©

  noncomputable def choose_unique {Œ± : Type} {p : Œ± ‚Üí Prop} (h : ExistsUnique p) : Œ± :=
    choose (ExistsUnique.exists h)

  theorem choose_spec_unique {Œ± : Type} {p : Œ± ‚Üí Prop}
    (h : ExistsUnique p) : p (choose_unique h)
      := by
        unfold choose_unique
        exact choose_spec (ExistsUnique.exists h)

  theorem choose_uniq {Œ± : Type} {p : Œ± ‚Üí Prop}
    (h : ExistsUnique p) {y : Œ±} (hy : p y) :
      y = choose_unique h
        :=
    let ‚ü®x, ‚ü®_, uniq‚ü©‚ü© := h
    have hcu : p (choose_unique h) := choose_spec_unique h
    have y_eq_x : y = x := uniq y hy
    have cu_eq_x : choose_unique h = x := uniq (choose_unique h) hcu
    y_eq_x.trans cu_eq_x.symm

  inductive ‚Ñï‚ÇÄ : Type
    where
    | zero : ‚Ñï‚ÇÄ
    | succ : ‚Ñï‚ÇÄ -> ‚Ñï‚ÇÄ
    deriving Repr, BEq, DecidableEq

  def ‚Ñï‚ÇÅ : Type := {n : ‚Ñï‚ÇÄ // n ‚â† ‚Ñï‚ÇÄ.zero}

  def ‚Ñï‚ÇÇ : Type := {n : ‚Ñï‚ÇÅ // n.val ‚â† ‚Ñï‚ÇÄ.succ ‚Ñï‚ÇÄ.zero}

  def id‚Ñï‚ÇÄ (n : ‚Ñï‚ÇÄ) : ‚Ñï‚ÇÄ := n
  def idNat (n : Nat) : Nat := n
  def EqFnGen {Œ± Œ≤ : Type} (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) :
      Prop :=
          ‚àÄ (x : Œ±), f x = g x
  def Comp {Œ± Œ≤ : Type} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ±) :
      Prop :=
          ‚àÄ (x : Œ±), g (f x) = x
  def EqFn {Œ± : Type}
          (f : ‚Ñï‚ÇÄ -> Œ±)(g : ‚Ñï‚ÇÄ -> Œ±) : Prop :=
    ‚àÄ (x : ‚Ñï‚ÇÄ), f x = g x
  def EqFn2 {Œ± : Type}
          (f : ‚Ñï‚ÇÄ √ó ‚Ñï‚ÇÄ -> Œ±)(g : ‚Ñï‚ÇÄ √ó ‚Ñï‚ÇÄ -> Œ±) : Prop :=
    ‚àÄ (x : ‚Ñï‚ÇÄ), ‚àÄ (y : ‚Ñï‚ÇÄ), f (x, y) = g (x, y)
  def EqFnNat {Œ± : Type}
          (f : Nat -> Œ±)(g : Nat -> Œ±) : Prop :=
    ‚àÄ (x : Nat), f x = g x

  set_option trace.Meta.Tactic.simp true

  notation "œÉ" n:max => ‚Ñï‚ÇÄ.succ n
  def cero : ‚Ñï‚ÇÄ := ‚Ñï‚ÇÄ.zero
  notation "ùüò" => ‚Ñï‚ÇÄ.zero

  def one : ‚Ñï‚ÇÄ := œÉ ùüò
  def two : ‚Ñï‚ÇÄ := œÉ one
  def three : ‚Ñï‚ÇÄ := œÉ two

  notation "ùüô" => one
  notation "ùüö" => two
  notation "ùüõ" => three

  def Œõ(n : Nat) : ‚Ñï‚ÇÄ :=
    match n with
    | Nat.zero => ùüò
    | Nat.succ k => œÉ (Œõ k)

  def Œ® (n : ‚Ñï‚ÇÄ) : Nat :=
    match n with
    | ‚Ñï‚ÇÄ.zero => Nat.zero
    | ‚Ñï‚ÇÄ.succ k => Nat.succ (Œ® k)

  instance : Coe Nat ‚Ñï‚ÇÄ where
    coe n := Œõ n

  def œÑ (n : ‚Ñï‚ÇÄ) : ‚Ñï‚ÇÄ :=
    match n with
    | ‚Ñï‚ÇÄ.zero => ùüò
    | ‚Ñï‚ÇÄ.succ k => k

  def œÅ (n : ‚Ñï‚ÇÄ) (h_n_neq_0 : n ‚â† ùüò) : ‚Ñï‚ÇÄ :=
    match n with
    | ‚Ñï‚ÇÄ.zero =>
      False.elim (h_n_neq_0 rfl)
    | ‚Ñï‚ÇÄ.succ k => k

end Peano

-- Ahora puedes exportar todo lo que est√° dentro del namespace Peano
export Peano (
  ExistsUnique choose choose_spec ‚Ñï‚ÇÄ ‚Ñï‚ÇÅ ‚Ñï‚ÇÇ
  id‚Ñï‚ÇÄ idNat EqFnGen Comp EqFn EqFn2 EqFnNat
  Œõ Œ® œÑ œÅ
)
-- PeanoNatLib/PeanoNatDiv.lean
